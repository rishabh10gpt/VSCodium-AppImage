name: Build VSCodium AppImage

on:
  # schedule:
  #   # Run weekly on Sunday at 03:30 UTC (adjust as needed)
  #   - cron: '30 3 * * 0'
  workflow_dispatch: # Allows manual triggering
  # push:
  #   tags:
  #     - 'v*' # Trigger on version tags (optional, for release builds)

jobs:
  build:
    runs-on: ubuntu-latest # Use a standard Linux runner

    steps:
      - name: Checkout Builder Repo
        uses: actions/checkout@v4 # Checks out your VSCodium-AppImage repo

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          # Dependencies needed by VSCodium build itself (check VSCodium docs for current list!)
          sudo apt-get install -y --no-install-recommends \
            build-essential git libx11-dev libxkbfile-dev libsecret-1-dev \
            python3 python3-pip fakeroot rpm libarchive-tools
          # Dependencies for AppImage creation
          sudo apt-get install -y --no-install-recommends fuse libfuse2

      - name: Set up Node.js and Yarn
        uses: actions/setup-node@v4
        with:
          # Check VSCodium repo for required Node.js version
          node-version: '18' # Example, verify this!
      - run: npm install -g yarn # Install yarn globally
      
      - name: Clone VSCodium Builder Repository # Renamed for clarity
        run: git clone --depth=1 https://github.com/VSCodium/vscodium.git

      # --- NEW Build Step using VSCodium's script ---
      - name: Run VSCodium Build Script
        working-directory: ./vscodium # Run from inside the cloned repo
        run: |
          echo "--- Starting VSCodium build script ---"
          # Execute the main build script.
          # It should handle fetching VSCode source and building.
          # Check VSCodium's own CI/docs for the exact arguments if needed.
          # The '--targets' flag seems common.
          ./build.sh --targets=linux-x64-min

      # --- AppImage Packaging Steps ---

      - name: Check Build Output Location # <--- Add this temporary step
        run: |
          echo "Listing contents of ./vscodium after build attempt:"
          ls -lR ./vscodium # Recursive list to find nested output dir
          # You might need to scroll through a lot of output here!

      - name: Prepare AppDir
        run: |
          mkdir AppDir
          echo "--- Copying build output from VSCodium build ---"

          # --- THIS PATH IS CRITICAL ---
          # *** YOU MUST UPDATE THIS PATH based on the logs/listing above ***
          build_output_dir="./vscodium/VSCode-linux-x64" # Current (likely wrong) assumption

          echo "Attempting to copy from: ${build_output_dir}"
          if [ -d "${build_output_dir}" ]; then
             # Use -T with cp if source is a directory to copy its *contents*
             cp -a "${build_output_dir}/." ./AppDir/
          else
             echo "ERROR: Build output directory '${build_output_dir}' not found!"
             exit 1
          fi

          # Copy the .desktop file and icon
          cp ./vscodium.desktop ./AppDir/
          cp ./vscodium.png ./AppDir/

      - name: Run linuxdeploy to Bundle Dependencies
        run: |
          # Set executable path relative to AppDir root
          local_executable_path="codium" # Adjust if the main executable name is different

          # Run linuxdeploy: Bundles libs, creates AppRun, integrates desktop/icon
          ./linuxdeploy --appdir AppDir \
            --executable "${local_executable_path}" \
            --desktop-file ./AppDir/vscodium.desktop \
            --icon-file ./AppDir/vscodium.png \
            --output appimage \
            --create-update-information # Important for delta updates

          # Rename the output AppImage (optional but recommended)
          # Extract VSCodium version (e.g., from package.json) - This part needs refinement
          # For now, using a generic name
          mv VSCodium*.AppImage VSCodium-x86_64.AppImage || echo "Rename failed, using default name."


      - name: Upload AppImage as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: VSCodium-AppImage
          path: ./*.AppImage # Uploads the generated AppImage

      # --- Optional: Create GitHub Release ---
      # This step usually runs only on tag pushes
      # - name: Create Release and Upload AppImage
      #   if: startsWith(github.ref, 'refs/tags/') # Only run for tags
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: ./*.AppImage
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs this token to create releases
